//+------------------------------------------------------------------+
//|                                                    Ma Bollin.mq5 |
//|                                 Copyright 2000-2023, Alex zhang. |
//|                                             im.zhangjf@gmail.com |
//+------------------------------------------------------------------+
#property copyright "Copyright 2000-2023, Alex zhang."
#property link      "im.zhangjf@gmail.com"
#property version   "1.00"

#include <Trade\Trade.mqh>

//持仓结构
struct TradeInfo
  {
   int               direction; //交易方向,1:买入,2:卖出
   datetime          outTime; //出场时间
   double            outPrice; //出场价格
   double            entryPrice; //入场价格
   double            stopPrice; //原始止损
   double            moveStopPrice; //移动止盈/止损
   double            profitRatio; //盈亏比
   bool              isWin; //是否盈利
   datetime          entryTime; //入场时间
   double            lot; //开仓数量
  };
//入参
input double StopLimit= 100.00;    // 最大止损金额
input int StopPoint= 10;    // 止损加点数
input int  StopType=1;   //止盈方式,1:固定止盈(价格达到本周期布林带上下轨),2:移动止盈/止损(达到固定止盈条件后,将止损设置为本周期布林带上下轨),3:主周期移动止盈/止损(主周期均线多空头转换止盈/或者是达到stopWinProfitRatio倍盈亏比止盈,只在跟随主周期趋势开仓有效)
input int OpenDeviateByMa=0; //开单条件过滤:开单价格偏离最近的均线最大点数,0为不过滤(例:开多单,开单价格必须小于最大周期均线+偏离量,超过则放弃开单)
input bool FollowMainMaSequence=false; //开单条件过滤:是否跟主周期均线排列相同才开单,true:是,false:否
input ENUM_TIMEFRAMES MainTimeFrames=PERIOD_D1; //主均线周期,默认:天
input double stopWinProfitRatio=10; //止盈方式为3时,止盈的最大盈亏比,达到该盈亏比后进行止盈,为0表示不主动止盈
//---
int    ExtHandleMa40=0;
int    ExtHandleMa50=0;
int    ExtHandleMa60=0;
int    ExtHandleMa70=0;
int    ExtHandleMa80=0;
int    ExtHandleBands=0;
int    ExtHandleRsi=0;
//大周期均线
int    ExtHandleMainMa50=0;
int    ExtHandleMainMa60=0;
int    ExtHandleMainMa70=0;
bool   IsCrossing=false;   //判断K线是否正在穿过布林带
bool   IsCrossed=false;    //判断k线是否已经穿过布林带
bool   IsPostioned=false;  //是否已开仓
int    CrossMaSequence=0;  //出现穿过布林带时的多头空头状态,1:多头,-1:空头
double ContractSize=0;     //标准合约大小
double SymbolPoint=0;      //交易品种点值
uint   Serial=0;           //交易序号
int    AccountId=0;        //交易账号
bool   IsRealAccount=false;//是否真实账户,true:是,false:否
double OpenStopPrice=0;  //开仓时需要设置止损的K线对应价格,用于设置止损
string GlobalSerialName=""; //保存序号的全局变量名称

bool   ExtHedging=false;
CTrade ExtTrade;
TradeInfo tradeInfo;

#define MA_MAGIC 39518605

//+------------------------------------------------------------------+
//| Calculate optimal lot size                                       |
//+------------------------------------------------------------------+
double TradeSizeOptimized(void)
  {
   int leverrage=AccountInfoInteger(ACCOUNT_LEVERAGE);
   double openPrice=NormalizeDouble(tradeInfo.entryPrice, Digits());
   double stopPrice=NormalizeDouble(tradeInfo.stopPrice, Digits());
//--- 计算仓位
   double lot=0;
//USD在后面的直盘:EURUSD
   if(StringFind(_Symbol,"USD") > 0)
     {
      lot=NormalizeDouble(StopLimit/(MathAbs(openPrice-stopPrice)*ContractSize),2);
     }
//USD在前面的直盘:USDJPY
   else
      if(StringFind(_Symbol,"USD") == 0)
        {
         lot=NormalizeDouble(StopLimit/(MathAbs(openPrice-stopPrice)*ContractSize/openPrice),2);
        }
      //交叉盘:NZDJPY
      else
         if(StringFind(_Symbol,"USD") <= 0)
           {
            string symbol=StringSubstr(_Symbol,0,3)+"USD";
            MqlTick tick;
            SymbolInfoTick(symbol, tick);
            double tickask=NormalizeDouble(tick.ask,SymbolInfoInteger(symbol,SYMBOL_DIGITS));
            lot=NormalizeDouble(StopLimit/(MathAbs(openPrice-stopPrice)*ContractSize*tickask/openPrice),2);
           }
//边界检查
   double minvol=SymbolInfoDouble(_Symbol,SYMBOL_VOLUME_MIN);
   if(lot<minvol)
      lot=minvol;

   double maxvol=SymbolInfoDouble(_Symbol,SYMBOL_VOLUME_MAX);
   if(lot>maxvol)
      lot=maxvol;
//--- return trading volume
   return(lot);
  }

//格式化TradeInfo价格位数
void FormatTradeInfo()
  {
   if(tradeInfo.entryPrice!=NULL)
     {
      tradeInfo.entryPrice=NormalizeDouble(tradeInfo.entryPrice,Digits());
     }
   if(tradeInfo.outPrice!=NULL)
     {
      tradeInfo.outPrice=NormalizeDouble(tradeInfo.outPrice,Digits());
     }
   if(tradeInfo.stopPrice!=NULL)
     {
      tradeInfo.stopPrice=NormalizeDouble(tradeInfo.stopPrice,Digits());
     }
   if(tradeInfo.moveStopPrice!=NULL)
     {
      tradeInfo.moveStopPrice=NormalizeDouble(tradeInfo.moveStopPrice,Digits());
     }
   if(tradeInfo.profitRatio!=NULL)
     {
      tradeInfo.profitRatio=NormalizeDouble(tradeInfo.profitRatio,2);
     }
  }
//+------------------------------------------------------------------+
//| Check for open position conditions                               |
//+------------------------------------------------------------------+
void CheckForOpen(void)
  {
   if(IsPostioned==true)
     {
      return;
     }
//获取当前K线数据
   MqlRates rt[2];
//--- go trading only for first ticks of new bar
   if(CopyRates(_Symbol,_Period,0,2,rt)!=2)
     {
      Print("CopyRates of ",_Symbol," failed, no history");
      return;
     }
   if(rt[1].tick_volume>1)
      return;
   MqlRates current=rt[0];
//测试时间用断点
   if(current.time==StringToTime("2022.01.28 00:00:00"))
     {
      printf("进入断点");
     }
//--- 获取均线组数据判断趋势
   double   ma40[2];
   if(CopyBuffer(ExtHandleMa40,0,0,2,ma40)!=2)
     {
      Print("CopyBuffer from iMA failed, no data");
      return;
     }
   double   ma50[2];
   if(CopyBuffer(ExtHandleMa50,0,0,2,ma50)!=2)
     {
      Print("CopyBuffer from iMA failed, no data");
      return;
     }
   double   ma60[2];
   if(CopyBuffer(ExtHandleMa60,0,0,2,ma60)!=2)
     {
      Print("CopyBuffer from iMA failed, no data");
      return;
     }
   double   ma70[2];
   if(CopyBuffer(ExtHandleMa70,0,0,2,ma70)!=2)
     {
      Print("CopyBuffer from iMA failed, no data");
      return;
     }
   double   ma80[2];
   if(CopyBuffer(ExtHandleMa80,0,0,2,ma80)!=2)
     {
      Print("CopyBuffer from iMA failed, no data");
      return;
     }
   double   bandsMid[2];
   if(CopyBuffer(ExtHandleBands,0,0,2,bandsMid)!=2)
     {
      Print("CopyBuffer from iBands upper failed, no data");
      return;
     }
   double   bandsUpper[2];
   if(CopyBuffer(ExtHandleBands,1,0,2,bandsUpper)!=2)
     {
      Print("CopyBuffer from iBands upper failed, no data");
      return;
     }
   double   bandslower[2];
   if(CopyBuffer(ExtHandleBands,2,0,2,bandslower)!=2)
     {
      Print("CopyBuffer from iBands lower failed, no data");
      return;
     }
   double   mainMa50[2];
   if(CopyBuffer(ExtHandleMainMa50,0,0,2,mainMa50)!=2)
     {
      Print("CopyBuffer from iMA failed, no data");
      return;
     }
   double   mainMa60[2];
   if(CopyBuffer(ExtHandleMainMa60,0,0,2,mainMa60)!=2)
     {
      Print("CopyBuffer from iMA failed, no data");
      return;
     }
   double   mainMa70[2];
   if(CopyBuffer(ExtHandleMainMa70,0,0,2,mainMa70)!=2)
     {
      Print("CopyBuffer from iMA failed, no data");
      return;
     }
//--- 检查是否开仓
   bool signal=false;
   ENUM_ORDER_TYPE direction=WRONG_VALUE; //开仓方向
//1.均线多头或者空头排列
   double maxMa=ma70[0];
   double ma[]= {ma50[0],ma60[0],ma70[0]};
//double ma[]= {ma40[0],ma50[0],ma60[0],ma70[0],ma80[0]};
   int maSequence=CalcMaSequence(ma);
//大周期均线排列
   double mainMa[]= {mainMa50[0],mainMa60[0],mainMa70[0]};
   int mainMaSequence=CalcMaSequence(mainMa);
//周期共振条件判断
   if(FollowMainMaSequence==true && maSequence!=mainMaSequence)
     {
      return;
     }
   if(maSequence==-1)
      direction=ORDER_TYPE_SELL;    // sell conditions
   else
      if(maSequence==1)
        {
         direction=ORDER_TYPE_BUY;  // buy conditions
        }
//2.如果之前没有出现穿越布林带,判断是否穿过了布林带的上轨跟下轨(多头下轨,空头上轨)
   if(IsCrossed==false)
     {
      if(direction==ORDER_TYPE_SELL)
        {
         if(current.low <= bandsUpper[0] && bandsUpper[0]<=current.high)
           {
            IsCrossed=true;
            IsCrossing=true;
            OpenStopPrice=current.high;
            CrossMaSequence=-1;
           }
        }
      if(direction==ORDER_TYPE_BUY)
        {
         if(current.low<= bandslower[0] && bandslower[0]<=current.high)
           {
            IsCrossed=true;
            IsCrossing=true;
            OpenStopPrice=current.low;
            CrossMaSequence=1;
           }
        }
     }
//3.如果已经出现穿越,则看当前是否是收出了阳线(做多)或者阴线(做空),符合条件就进场
//进场条件为多头排列时,价格下穿布林带下轨后收出回到布林带中第一个阳线,空头排列时,价格上
//穿布林带上轨后收出回到布林带中第一个阴线
   if(IsCrossed==true)
     {
      //出现了穿过布林带,判断当前是否还是正在布林带上,如果在,更新止损价格,如果回到布林带上并收反向K线进场,如果完全偏离出布林带放弃这次
      if(direction==ORDER_TYPE_SELL && IsCrossing)
        {
         //如果多空头方向变了,则放弃
         if(CrossMaSequence!=-1)
           {
            ResetState();
           }
         //K线最低价比布林带高,意思是离开了布林带,放弃
         //if(current.low>bandsUpper[0])
         //  {
         //   IsCrossed=false;
         //   IsCrossing=false;
         //   tradeInfo.stopPrice=0;
         //   CrossMaSequence=0;
         //   OpenStopPrice=0;
         //  }
         else
           {
            //只要收出阴线且阴线没有穿过布林带中线进场,阳线继续更新止损价
            if(current.open<=current.close)
              {
               OpenStopPrice=fmax(current.high, OpenStopPrice);
              }
            if(current.open>current.close)
              {
               if(current.close>bandsMid[0])
                 {
                  if(OpenDeviateByMa==0 || current.close<maxMa+(SymbolPoint*OpenDeviateByMa))
                    {
                     OpenStopPrice=fmax(current.high, OpenStopPrice);
                     tradeInfo.stopPrice=OpenStopPrice+(StopPoint*SymbolPoint);
                     tradeInfo.moveStopPrice=tradeInfo.stopPrice;
                     tradeInfo.entryPrice=current.close;
                     tradeInfo.lot=TradeSizeOptimized();
                     tradeInfo.direction=2;
                     tradeInfo.entryTime=TimeLocal();
                     signal=true;
                    }
                  else
                    {
                     ResetState();
                    }
                 }
               else
                 {
                  ResetState();
                 }
              }
           }
        }
      if(direction==ORDER_TYPE_BUY && IsCrossing)
        {
         //如果多空头方向变了,则放弃
         if(CrossMaSequence!=1)
           {
            ResetState();
           }
         //K线最高价比布林带低,意思是离开了布林带,放弃
         //if(current.high<bandslower[0])
         //  {
         //   IsCrossed=false;
         //   IsCrossing=false;
         //   tradeInfo.stopPrice=0;
         //   CrossMaSequence=0;
         //   OpenStopPrice=0;
         //  }
         else
           {
            //只要收出阳线且阳线没有穿过布林带中线进场,阴线继续更新止损价
            if(current.open>=current.close)
              {
               OpenStopPrice=fmin(current.low, OpenStopPrice);
              }
            if(current.open<current.close)
              {
               if(current.close<bandsMid[0])
                 {
                  if(OpenDeviateByMa==0 || current.close>maxMa-(SymbolPoint*OpenDeviateByMa))
                    {
                     OpenStopPrice=fmin(current.low, OpenStopPrice);
                     tradeInfo.stopPrice=OpenStopPrice-(StopPoint*SymbolPoint);
                     tradeInfo.moveStopPrice=tradeInfo.stopPrice;
                     tradeInfo.entryPrice=current.close;
                     tradeInfo.direction=1;
                     tradeInfo.lot=TradeSizeOptimized();
                     tradeInfo.entryTime=TimeLocal();
                     signal=true;
                    }
                  else
                    {
                     ResetState();
                    }
                 }
               else
                 {
                  ResetState();
                 }
              }
           }
        }
     }
//--- 开仓
   if(direction!=WRONG_VALUE && signal)
     {
      if(TerminalInfoInteger(TERMINAL_TRADE_ALLOWED) && Bars(_Symbol,_Period)>100)
        {
         FormatTradeInfo();
         Serial=Serial+1;
         //循环开仓,确保开成功
         int i=1;
         do
           {
            ExtTrade.PositionOpen(_Symbol,direction,tradeInfo.lot,SymbolInfoDouble(_Symbol,direction==ORDER_TYPE_SELL ? SYMBOL_BID:SYMBOL_ASK),tradeInfo.stopPrice,0,IntegerToString(Serial));
            Sleep(500);
            uint retCode=ExtTrade.ResultRetcode();
            printf(StringFormat("品种:%s_%s,编号:%d,第%d次开仓,开仓结果代码:%d",_Symbol,StringSubstr(EnumToString(_Period),7),Serial,i++,retCode));
            if(retCode==TRADE_RETCODE_DONE)
              {
               break;
              }
            if(i>20)
              {
               //开仓失败,发送邮件
               string text=StringFormat("开仓失败,%s账号:%d,品种:%s_%s,编号:%d,错误代码:%d,错误内容:%s",IsRealAccount?"实盘":"模拟",AccountId,_Symbol,StringSubstr(EnumToString(_Period),7),Serial,retCode,transReturnCode(retCode));
               printf(text);
               string title=StringFormat("开仓失败,%s账号:%d,品种:%s_%s,编号:%d",IsRealAccount?"实盘":"模拟",AccountId,_Symbol,StringSubstr(EnumToString(_Period),7),Serial);
               SendMail(title, text);
               SendNotification(text);
               //开仓失败重置状态,之后重新判断进场
               ResetState();
               return;
              }
           }
         while(i<=20);

         string text=StringFormat("开仓成功,%s账号:%d,品种:%s_%s,编号:%d,开仓数量:%.2f,方向:%s,开仓价格:%f,止损价格:%f,开仓时间:%s",IsRealAccount?"实盘":"模拟",AccountId,_Symbol,StringSubstr(EnumToString(_Period),7),Serial,tradeInfo.lot,direction==ORDER_TYPE_SELL ? "卖开":"买开",tradeInfo.entryPrice,tradeInfo.stopPrice,TimeToString(tradeInfo.entryTime, TIME_DATE|TIME_SECONDS));
         printf(text);
         //发送开仓邮件
         string title=StringFormat("开仓成功,%s账号:%d,品种:%s_%s,编号:%d",IsRealAccount?"实盘":"模拟",AccountId,_Symbol,StringSubstr(EnumToString(_Period),7),Serial);
         SendMail(title, text);
         //发送开仓通知
         SendNotification(text);
         //开仓成功后需要把状态重置
         ResetState();
         //更新全局变量
         GlobalVariableSet(GlobalSerialName, Serial);
         GlobalVariablesFlush();
        }
     }
//---
  }
//+------------------------------------------------------------------+
//|重置入场状态                                                      |
//+------------------------------------------------------------------+
void ResetState()
  {
   IsCrossed=false;
   IsCrossing=false;
   CrossMaSequence=0;
   OpenStopPrice=0;
  }
//判断均线多头还是空头
int CalcMaSequence(double &ma[])
  {
//判断是否有值
   for(int i=0; i<ArraySize(ma)-1; i++)
     {
      if(ma[i]==0)
        {
         return 0;
        }
     }
//判断是否均线多头
   bool isHigher=true;
   for(int i=0; i<ArraySize(ma)-2; i++)
     {
      if(ma[i]<=ma[i+1])
        {
         isHigher=false;
         break;
        }
     }
   if(isHigher)
     {
      return 1;
     }
//判断是否均线空头
   bool isLower=true;
   for(int i=0; i<ArraySize(ma)-2; i++)
     {
      if(ma[i]>=ma[i+1])
        {
         isLower=false;
         break;
        }
     }
   if(isLower)
     {
      return -1;
     }
   return 0;
  }
//+------------------------------------------------------------------+
//| Check for close position conditions                              |
//+------------------------------------------------------------------+
void CheckForClose(void)
  {
   if(IsPostioned==false)
     {
      return;
     }
//--- 获取布林带数据
   double   bandsMid[1];
   if(CopyBuffer(ExtHandleBands,0,0,1,bandsMid)!=1)
     {
      Print("CopyBuffer from iBands upper failed, no data");
      return;
     }
   double   bandsUpper[1];
   if(CopyBuffer(ExtHandleBands,1,0,1,bandsUpper)!=1)
     {
      Print("CopyBuffer from iBands upper failed, no data");
      return;
     }
   double   bandslower[1];
   if(CopyBuffer(ExtHandleBands,2,0,1,bandslower)!=1)
     {
      Print("CopyBuffer from iBands lower failed, no data");
      return;
     }
   double   mainMa50[2];
   if(CopyBuffer(ExtHandleMainMa50,0,0,2,mainMa50)!=2)
     {
      Print("CopyBuffer from iMA failed, no data");
      return;
     }
   double   mainMa60[2];
   if(CopyBuffer(ExtHandleMainMa60,0,0,2,mainMa60)!=2)
     {
      Print("CopyBuffer from iMA failed, no data");
      return;
     }
   double   mainMa70[2];
   if(CopyBuffer(ExtHandleMainMa70,0,0,2,mainMa70)!=2)
     {
      Print("CopyBuffer from iMA failed, no data");
      return;
     }
//获取当前报价
   MqlTick tick;
   if(!SymbolInfoTick(_Symbol, tick))
     {
      Print("SymbolInfoTick of ",_Symbol," failed, no tick");
      return;
     }
//测试时间用断点
   if(tick.time==StringToTime("2022.01.28 10:00:00"))
     {
      printf("进入断点");
     }
//--- 判断是否需要平仓
   bool signal=false;
//判断出场条件, 做多判断触碰布林上轨,做空判断触碰布林下轨
   if(tradeInfo.direction==1)
     {
      double bid=SymbolInfoDouble(_Symbol,SYMBOL_BID);
      //判断止损
      if(bid<=tradeInfo.stopPrice)
        {
         tradeInfo.outTime=TimeLocal();
         tradeInfo.outPrice=tradeInfo.stopPrice;
         tradeInfo.profitRatio=-1;
         tradeInfo.isWin=false;
         signal=true;
        }
      if(!signal)
        {
         //判断止盈
         if(StopType==1)
           {
            //触碰上轨,以上轨价格平仓
            if(bid>=bandsUpper[0])
              {
               tradeInfo.outTime=TimeLocal();
               tradeInfo.outPrice=bandsUpper[0];
               tradeInfo.profitRatio=(tradeInfo.outPrice-tradeInfo.entryPrice)/(tradeInfo.entryPrice-tradeInfo.stopPrice);
               tradeInfo.isWin=true;
               signal=true;
              }
           }
         else
            if(StopType==2)
              {
               //触碰上轨,调整移动止损位置到布林下轨
               if(bid>=bandsUpper[0])
                 {
                  tradeInfo.moveStopPrice=bandslower[0]-(StopPoint*SymbolPoint);
                 }
               //移动止损跟原始止损不一致,说明开始趋势追踪,每次更新移动止损到下轨
               if(tradeInfo.moveStopPrice!=tradeInfo.stopPrice)
                 {
                  tradeInfo.moveStopPrice=bandslower[0]-(StopPoint*SymbolPoint);
                 }
               //止损(移动止损,有可能止盈)
               if(bid<=tradeInfo.moveStopPrice)
                 {
                  tradeInfo.outTime=TimeLocal();
                  tradeInfo.outPrice=tradeInfo.moveStopPrice;
                  //判断是否盈利
                  if(tradeInfo.moveStopPrice>=tradeInfo.entryPrice)
                    {
                     tradeInfo.isWin=true;
                     tradeInfo.profitRatio=(tradeInfo.moveStopPrice-tradeInfo.entryPrice)/(tradeInfo.entryPrice-tradeInfo.stopPrice);
                    }
                  else
                    {
                     tradeInfo.isWin=false;
                     tradeInfo.profitRatio=(tradeInfo.entryPrice-tradeInfo.moveStopPrice)/(tradeInfo.entryPrice-tradeInfo.stopPrice);
                    }
                  signal=true;
                 }
              }
            else
               if(StopType==3)
                 {
                  //实时盈亏比
                  double profitRatio = (bid-tradeInfo.entryPrice)/(tradeInfo.entryPrice-tradeInfo.stopPrice);
                  //大周期均线排列
                  double mainMa[]= {mainMa50[0],mainMa60[0],mainMa70[0]};
                  int mainMaSequence=CalcMaSequence(mainMa);
                  //大周期趋势变为空头排列平仓
                  if(mainMaSequence==-1 || (stopWinProfitRatio != 0 && profitRatio >= stopWinProfitRatio))
                    {
                     tradeInfo.outTime=TimeLocal();
                     tradeInfo.outPrice=bid;
                     tradeInfo.profitRatio=(tradeInfo.outPrice-tradeInfo.entryPrice)/(tradeInfo.entryPrice-tradeInfo.stopPrice);
                     tradeInfo.isWin=true;
                     signal=true;
                    }
                 }
        }
     }
   else
      if(tradeInfo.direction==2)
        {
         double ask=SymbolInfoDouble(_Symbol,SYMBOL_ASK);
         //判断止损
         if(ask>=tradeInfo.stopPrice)
           {
            tradeInfo.outTime=TimeLocal();
            tradeInfo.outPrice=tradeInfo.stopPrice;
            tradeInfo.profitRatio=-1;
            tradeInfo.isWin=false;
            signal=true;
           }
         if(!signal)
           {
            if(StopType==1)
              {
               //触碰下轨,以下轨价格平仓
               if(ask<=bandslower[0])
                 {
                  tradeInfo.outTime=TimeLocal();
                  tradeInfo.outPrice=bandslower[0];
                  tradeInfo.profitRatio=(tradeInfo.entryPrice-tradeInfo.outPrice)/(tradeInfo.stopPrice-tradeInfo.entryPrice);
                  tradeInfo.isWin=true;
                  signal=true;
                 }
              }
            else
               if(StopType==2)
                 {
                  //触碰下轨,调整移动止损位置到布林上轨
                  if(ask<=bandslower[0])
                    {
                     tradeInfo.moveStopPrice=bandsUpper[0]+(StopPoint*SymbolPoint);
                    }
                  //移动止损跟原始止损不一致,说明开始趋势追踪,每次更新移动止损到上轨
                  if(tradeInfo.moveStopPrice!=tradeInfo.stopPrice)
                    {
                     tradeInfo.moveStopPrice=bandsUpper[0]+(StopPoint*SymbolPoint);
                    }
                  //止损(移动止损,有可能止盈)
                  if(ask>=tradeInfo.moveStopPrice)
                    {
                     tradeInfo.outTime=TimeLocal();
                     tradeInfo.outPrice=tradeInfo.moveStopPrice;
                     //判断是否盈利
                     if(tradeInfo.moveStopPrice<=tradeInfo.entryPrice)
                       {
                        tradeInfo.isWin=true;
                        tradeInfo.profitRatio=(tradeInfo.entryPrice-tradeInfo.moveStopPrice)/(tradeInfo.stopPrice-tradeInfo.entryPrice);
                       }
                     else
                       {
                        tradeInfo.isWin=false;
                        tradeInfo.profitRatio=(tradeInfo.moveStopPrice-tradeInfo.entryPrice)/(tradeInfo.stopPrice-tradeInfo.entryPrice);
                       }
                     signal=true;
                    }
                 }
               else
                  if(StopType==3)
                    {
                     //实时盈亏比
                     double profitRatio = (tradeInfo.entryPrice-ask)/(tradeInfo.stopPrice-tradeInfo.entryPrice);
                     //大周期均线排列
                     double mainMa[]= {mainMa50[0],mainMa60[0],mainMa70[0]};
                     int mainMaSequence=CalcMaSequence(mainMa);
                     //大周期趋势变为多头排列平仓
                     if(mainMaSequence==1 || (stopWinProfitRatio != 0 && profitRatio >= stopWinProfitRatio))
                       {
                        tradeInfo.outTime=TimeLocal();
                        tradeInfo.outPrice=ask;
                        tradeInfo.profitRatio=(tradeInfo.entryPrice-tradeInfo.outPrice)/(tradeInfo.stopPrice-tradeInfo.entryPrice);
                        tradeInfo.isWin=true;
                        signal=true;
                       }
                    }
           }
        }
//--- 平仓
   if(signal)
     {
      if(TerminalInfoInteger(TERMINAL_TRADE_ALLOWED) && Bars(_Symbol,_Period)>100)
        {
         FormatTradeInfo();
         //循环平仓,确保平掉
         int i=1;
         do
           {
            ExtTrade.PositionClose(_Symbol);
            Sleep(500);
            uint retCode=ExtTrade.ResultRetcode();
            printf(StringFormat("品种:%s_%s,编号:%d,第%d次平仓,平仓结果代码:%d",_Symbol,StringSubstr(EnumToString(_Period),7),Serial,i++,retCode));
            if(retCode==TRADE_RETCODE_DONE||retCode==TRADE_RETCODE_POSITION_CLOSED)
              {
               break;
              }
            if(i>20)
              {
               //平仓失败,发送邮件
               string text=StringFormat("平仓失败,%s账号:%d,品种:%s_%s,编号:%d,错误代码:%d,错误内容:%s",IsRealAccount?"实盘":"模拟",AccountId,_Symbol,StringSubstr(EnumToString(_Period),7),Serial,retCode,transReturnCode(retCode));
               printf(text);
               string title=StringFormat("平仓失败,%s账号:%d,品种:%s_%s,编号:%d",IsRealAccount?"实盘":"模拟",AccountId,_Symbol,StringSubstr(EnumToString(_Period),7),Serial);
               SendMail(title, text);
               SendNotification(text);
               return;
              }
           }
         while(i<=20);
         //发送平仓邮件
         string text=StringFormat("平仓成功,%s账号:%d,品种:%s_%s,编号:%d,平仓价格:%f,方向:%s,盈亏比:%.2f,是否盈利:%s,平仓时间:%s",IsRealAccount?"实盘":"模拟",AccountId,_Symbol,StringSubstr(EnumToString(_Period),7),Serial,tradeInfo.outPrice,
                                  tradeInfo.direction==ORDER_TYPE_SELL ? "买平":"卖平",tradeInfo.profitRatio,tradeInfo.isWin?"是":"否",TimeToString(tradeInfo.outTime, TIME_DATE|TIME_SECONDS));
         printf(text);
         //发送平仓邮件
         string title=StringFormat("平仓成功,%s账号:%d,品种:%s_%s,编号:%d",IsRealAccount?"实盘":"模拟",AccountId,_Symbol,StringSubstr(EnumToString(_Period),7),Serial);
         SendMail(title, text);
         //发送平仓通知
         SendNotification(text);
        }
     }
//---
  }
//错误代码翻译
string transReturnCode(uint returnCode)
  {
   if(returnCode==TRADE_RETCODE_NO_MONEY)
     {
      return "资金(保证金)不足";
     }
   if(returnCode==TRADE_RETCODE_POSITION_CLOSED)
     {
      return "持仓已关闭";
     }
   if(returnCode==TRADE_RETCODE_MARKET_CLOSED)
     {
      return "收市";
     }
   if(returnCode==TRADE_RETCODE_REQUOTE)
     {
      return "重新报价";
     }
   if(returnCode==TRADE_RETCODE_CONNECTION)
     {
      return "与服务器无连接";
     }
   if(returnCode==TRADE_RETCODE_LIMIT_ORDERS)
     {
      return "待办订单数量达到限制";
     }
   if(returnCode==TRADE_RETCODE_REJECT)
     {
      return "拒绝请求";
     }
   if(returnCode==TRADE_RETCODE_INVALID)
     {
      return "无效请求";
     }
   if(returnCode==TRADE_RETCODE_INVALID_VOLUME)
     {
      return "无效成交量";
     }
   if(returnCode==TRADE_RETCODE_INVALID_PRICE)
     {
      return "无效价格";
     }
   if(returnCode==TRADE_RETCODE_INVALID_STOPS)
     {
      return "无效止损价";
     }
   if(returnCode==TRADE_RETCODE_TRADE_DISABLED)
     {
      return "关闭交易";
     }
   if(returnCode==TRADE_RETCODE_TOO_MANY_REQUESTS)
     {
      return "太频繁的请求";
     }
   return "未知错误";
  }
//+------------------------------------------------------------------+
//| Position select depending on netting or hedging                  |
//+------------------------------------------------------------------+
bool SelectPosition()
  {
   bool res=false;
//--- check position in Hedging mode
   if(ExtHedging)
     {
      uint total=PositionsTotal();
      for(uint i=0; i<total; i++)
        {
         string position_symbol=PositionGetSymbol(i);
         if(_Symbol==position_symbol && MA_MAGIC==PositionGetInteger(POSITION_MAGIC))
           {
            //填充持仓方向.开仓价位,止损价位等
            if(tradeInfo.direction==0)
              {
               tradeInfo.direction=PositionGetInteger(POSITION_TYPE)==POSITION_TYPE_BUY ? 1:2;
               tradeInfo.stopPrice=PositionGetDouble(POSITION_SL);
               tradeInfo.moveStopPrice=tradeInfo.stopPrice;
               tradeInfo.entryPrice=PositionGetDouble(POSITION_PRICE_OPEN);
               tradeInfo.lot=PositionGetDouble(POSITION_VOLUME);
               string comment=PositionGetString(POSITION_COMMENT);
               if(comment!="")
                 {
                  Serial=StringToInteger(comment);
                 }
              }
            res=true;
            break;
           }
        }
     }
//--- check position in Netting mode
   else
     {
      if(!PositionSelect(_Symbol))
         return(false);
      else
         if(PositionGetInteger(POSITION_MAGIC)==MA_MAGIC) //---check Magic number
           {
            //填充持仓方向.开仓价位,止损价位等
            if(tradeInfo.direction==0)
              {
               tradeInfo.direction=PositionGetInteger(POSITION_TYPE)==POSITION_TYPE_BUY ? 1:2;
               tradeInfo.stopPrice=PositionGetDouble(POSITION_SL);
               tradeInfo.moveStopPrice=tradeInfo.stopPrice;
               tradeInfo.entryPrice=PositionGetDouble(POSITION_PRICE_OPEN);
               tradeInfo.lot=PositionGetDouble(POSITION_VOLUME);
               string comment=PositionGetString(POSITION_COMMENT);
               if(comment!="")
                 {
                  Serial=StringToInteger(comment);
                 }
              }
            return true;
           }
      return(false);
     }
//--- result for Hedging mode
   return(res);
  }
//+------------------------------------------------------------------+
//| Expert initialization function                                   |
//+------------------------------------------------------------------+
int OnInit(void)
  {
//--- prepare trade class to control positions if hedging mode is active
   ExtHedging=((ENUM_ACCOUNT_MARGIN_MODE)AccountInfoInteger(ACCOUNT_MARGIN_MODE)==ACCOUNT_MARGIN_MODE_RETAIL_HEDGING);
   ExtTrade.SetExpertMagicNumber(MA_MAGIC);
   ExtTrade.SetMarginMode();
   ExtTrade.SetTypeFillingBySymbol(Symbol());
   ContractSize=SymbolInfoDouble(_Symbol,SYMBOL_TRADE_CONTRACT_SIZE);
   SymbolPoint=SymbolInfoDouble(_Symbol,SYMBOL_POINT);
   AccountId=AccountInfoInteger(ACCOUNT_LOGIN);
   IsRealAccount=AccountInfoInteger(ACCOUNT_TRADE_MODE)==ACCOUNT_TRADE_MODE_REAL;
//初始化数据
//--- 均线跟布林带指标加载
   ExtHandleMa40=iMA(_Symbol,_Period,40,0,MODE_EMA,PRICE_CLOSE);
   ExtHandleMa50=iMA(_Symbol,_Period,50,0,MODE_EMA,PRICE_CLOSE);
   ExtHandleMa60=iMA(_Symbol,_Period,60,0,MODE_EMA,PRICE_CLOSE);
   ExtHandleMa70=iMA(_Symbol,_Period,70,0,MODE_EMA,PRICE_CLOSE);
   ExtHandleMa80=iMA(_Symbol,_Period,80,0,MODE_EMA,PRICE_CLOSE);
   ExtHandleBands=iBands(_Symbol,_Period,20,0,2,PRICE_CLOSE);
   ExtHandleRsi=iRSI(_Symbol,_Period,14,PRICE_CLOSE);
//大周期均线
   ExtHandleMainMa50=iMA(_Symbol,MainTimeFrames,50,0,MODE_EMA,PRICE_CLOSE);
   ExtHandleMainMa60=iMA(_Symbol,MainTimeFrames,60,0,MODE_EMA,PRICE_CLOSE);
   ExtHandleMainMa70=iMA(_Symbol,MainTimeFrames,70,0,MODE_EMA,PRICE_CLOSE);
//加载全局序号
   GlobalSerialName=StringFormat("%s_%s_%d_Serial",_Symbol,StringSubstr(EnumToString(_Period),7),MA_MAGIC);
   if(GlobalVariableCheck(GlobalSerialName))
   {
      Serial=GlobalVariableGet(GlobalSerialName);
   }
//是否有仓位
   IsPostioned=SelectPosition();
//--- ok
   return(INIT_SUCCEEDED);
  }
//+------------------------------------------------------------------+
//| Expert tick function                                             |
//+------------------------------------------------------------------+
void OnTick(void)
  {
//---
   IsPostioned=SelectPosition();
   if(IsPostioned)
      CheckForClose();
   else
      CheckForOpen();
//---
  }
//+------------------------------------------------------------------+
//| Expert deinitialization function                                 |
//+------------------------------------------------------------------+
void OnDeinit(const int reason)
  {
  }
//+------------------------------------------------------------------+

//+------------------------------------------------------------------+
//| Trade function                                                   |
//+------------------------------------------------------------------+
void OnTrade()
  {
//---

  }
//+------------------------------------------------------------------+
//| TradeTransaction function                                        |
//+------------------------------------------------------------------+
void OnTradeTransaction(const MqlTradeTransaction& trans,
                        const MqlTradeRequest& request,
                        const MqlTradeResult& result)
  {
//---

  }
//+------------------------------------------------------------------+
